pwd
ls
cd /home1
lcd /home1
pwd
setwd("/home1/DataScience/Work/datasci_course_materials/assignment5")
ls
dir
cd assignment5
install.packages("caret")
install.packages("Matrix")
q()
library(caret)
sdata<-read.csv("seaflow_21min.csv")
sindex<-createDataPartition(sdata,p=.8,list=FALSE,times=1)
sindex<-createDataPartition(sdata,p=.8,list = FALSE,times=1)
sindex<-createDataPartition(sdata,p=.8)
sindex<-createDataPartition([sdata],p=.8)
sindex<-createDataPartition(sdata[:],p=.8)
sindex<-createDataPartition(sdata[[:]],p=.8)
sindex<-createDataPartition(sdata[[:]],p=.8)
sdata[:]
sindex<-createDataPartition(sdata[,],p=.8)
sindex<-createDataPartition(sdata$time,p=.8)
sindex<-createDataPartition(sdata$time,p=.8,list=FALSE)
traindata<-sdata[sindex]
testdata<-sdata[sindex]
timev=traindata$time
traindata
traindata<-sdata[sindex,]
testdata<-sdata[-sindex,]
traindata
timev=traindata$time
mean(timev)
ggplot
help ggplot
ggplot(traindata,aex(x=pe,y=ch1_small)
)
ggplot(traindata,aex(x=pe,y=ch1_small))
ggplot(traindata,aex(x=pe,y=ch1_small),geom_boxplot() + coord_flip())
ggplot(traindata,aes(x=pe,y=ch1_small),geom_boxplot() + coord_flip())
ggplot(traindata,aes(x=pe,y=ch1_small))
ggplot(traindata,aes(x="pe",y="ch1_small"))
ggplot(traindata,aes(x="pe",y="ch1_small"))+geom_line()
ggplot(traindata,aes(x="pe",y="ch1_small"))+geom_boxplot()
ggplot(traindata,aes(x=pe,y=ch1_small))+geom_boxplot()
traindata$ch1_small
traindata
traindata$chl_small
ggplot(traindata,aes(x=pe,y=chl_small))+geom_boxplot()
ggplot(traindata,aes(x=pe,y=chl_small))
ggplot(traindata,aes(x=pe,y=chl_small))+geom_list()
ggplot(traindata,aes(x=pe,y=chl_small))+geom_line()
ggplot(traindata,aes(x=pe,y=chl_small),color=pop)+geom_line()
ggplot(traindata,aes(x=pe,y=chl_small,color=pop))+geom_line()
fol<-formula(response ~ fsc_small+fsc_perp)
fol
fol<-formula(response ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model<-rpart
library(rpart)
model<-rpart(fol,method="class",data=traindata)
fol
fol<-formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model<-rpart(fol,method="class",data=traindata)
model
print(model)
ggplot(traindata,aes(x=pe,y=chl_small,color=pop))+geom_line()
predict
predict(model,testdata)
testdata
predict(model,testdata)
predict(model,testdata,se.fit=TRUE)
output=predict(model,testdata,se.fit=TRUE)
output$pop
output | more
print(output,quote=TRUE,row.name=TRUE)
print output(1,2)
output(1,2)
output[1,2]
output[1,]
which.max(output)
which.max(output[1,:])
which.max(output[1,])
which.max(output[2,])
which.max(output[,])
which.max(output[,:])
cbind(a, max=apply(a,1,max),
         max.col.num =apply(a,1,which.max) ,
         max.col.name= names(a)[apply(a,1,which.max)]  ) cbind(a, max=apply(a,1,max),
         max.col.num =apply(a,1,which.max) ,
cbind(output,max=apply(output,1,max),max.col.name=names(output)[apply(output,1,which.max)])
cbind(row.names(output),apply(output,1,function(x) names(a)[which(x==max(x))])))
cbind(row.names(output),apply(output,1,function(x) names(a)[which(x==max(x))]))
cbind(row.names(output),apply(output,1,function(x) names(output)[which(x==max(x))]))
apply(output,1,which.max)
as.data.frame(cbind(row.names(a),apply(a,1,function(x)
as.data.frame(cbind(row.names(a),apply(a,1,function(x)
names(output)[which(x==max(x))])))
as.data.frame(cbind(row.names(output),apply(output,1,function(x) names(output)[which(x==max(x))])))
output
as.data.frame(cbind(row.names(output),apply(output,1,function(x) names(output)[which(x==max(x))])))
output
as.data.frame(cbind(row.names(output),apply(output,1,function(x) names(output)[which(x==max(x))])))
apply(output,1,max)
cbind(row.names(output),apply(a,1,max))
cbind(row.names(output),apply(output,1,max))
cbind(row.names(output),apply(output,1,function(x) names(output)[which(x==max(x))])))
cbind(row.names(output),apply(output,1,function(x) names(output)[which(x==max(x))]))
column.names(output)
row.names(output)
apply(output,1,which.max)
colnames(output)
cbind(colnames(output),apply(output,1,function(x) names(output)[which(x==max(x))]))
apply(output,1,function(x) max(x))
apply(output,1,function(x) which.max(x))
apply(output,1,function(x) colnames(which.max(x)))
colnames
colnames(output)
mynames=colnames(output)
apply(output,1,function(x) mynames[(which.max(x))])
testreturn=apply(output,1,function(x) mynames[(which.max(x))])
test$pop
testdata$pop
testval=testdata$pop
testreturn==testval
reg=testreturn==testval
reg
summary(reg)
output=predict(model,testdata,se.fit=TRUE)
reg=testreturn==testval
output=predict(model,testdata,se.fit=TRUE)
library(randomforest)
install.packages(randomforest)
library(randomForest)
install.packages(randomForest)
library("randomForest")
install.packages("randomForest")
library(randomForest)
model<-randomForest(fol,data=traindata)
traindata<-sdata[sindex]
sindex<-createDataPartition(sdata$time,p=.6,list=FALSE)
traindata<-sdata[sindex]
testdata<-sdata[sindex]
model<-randomForest(fol,data=traindata)
model<-randomForest(fol,data=traindata)
testdata<-sdata[-sindex]
traindata
sindex<-createDataPartition(sdata$time,p=.6,list=FALSE)
testdata<-sdata[sindex,]
testdata<-sdata[-sindex,]
model<-randomForest(fol,data=traindata)
fol
traindata<-sdata[sindex,]
model<-randomForest(fol,data=traindata)
memory.limit(size=4097)
gc(TRUE)
.Machine$sizeof.pointer
memory.limit(3999)
sindex<-createDataPartition(sdata$time,p=.5,list=FALSE)
traindata<-sdata[sindex,]
model<-randomForest(fol,data=traindata)
testdata<-sdata[-sindex,]
output=predict(model,testdata,se.fit=TRUE)
testreturn=apply(output,1,function(x) mynames[(which.max(x))])
apply(output,1,function(x) mynames[(which.max(x))])
output
testdata
output$pop
output[,4]
output[,1]
colnames(output)
mynames=colnames(output)
mynames
dimnames(output)
dim
dim(output)
output[1,]
output
testval
t=output==testval
output==testval
t=output==testval
summary(t)
importance(model)
model<-svm(fol,data=traindata)
library(e1071)
model<-svm(fol,data=traindata)
output=predict(model,testdata,se.fit=TRUE)
output
t=output==testval
testval=testdata$pop
t=output==testval
summary(t)
table(pred=output,true=testingdata$pop)
table(pred=output,true=testdata$pop)
model<-randomForest(fol,data=traindata)
outputrf=predict(model,testdata,se.fit=TRUE)
t=output==testval
summary(t)
t=outputrf==testval
summary(t)
model<-rpart(fol,data=traindata)
model<-rpart(fol,method="class",data=traindata)
outputrpart=predict(model,testdata,se.fit=TRUE)
outputrpart
apply(outputrpart,1,function(x) mynames[(which.max(x))])
apply(outputrpart,1,max)
mynames
mynames=colnames(outputrpart)
mynames
apply(outputrpart,1,function(x) mynames[(which.max(x))])
rpartoutputval=apply(outputrpart,1,function(x) mynames[(which.max(x))])
t=rpartoutputval==testval
t
summary(t)
print(model)
modelrf<-randomForest(fol,data=traindata)
importance(model)
importance(model)
importance(modelrf)
modelrf
table(pred=outputrf,testdata#pop)
table(pred=outputrf,true=testdata$pop)
table(pred=outputrpart,true=testdata$pop)
table(pred=rpartoutputval,true=testdata$pop)
ggplot(sdata,aes(x=fsc_small))+geom_line()
ggplot(sdata,aex(x=fsc_small))+geom_line()
ggplot(sdata,aes(x=fsc_small))+geom_line()
sdata
ggplot(sdata,aes(x=fsc_small))+geom_line()
ggplot(sdata,aes(x=fsc_small))+geom_density()
ggplot(sdata,aes(x=fsc_small))+geom_dotplot()
ggplot(sdata,aes(x=fsc_small))+geom_density()
ggplot(sdata,aes(x=fsc_perp))+geom_density()
ggplot(sdata,aes(x=pe))+geom_density()
plot
x=sdata$time
y=sdata$fsc_small
plot(x,y)
y=sdata$fsc_perp
plot(x,y)
y=sdata$pe
plot(x,y)
y=sdata$fsc_big
plot(x,y)
y=sdata$chl_small
plot(x,y)
y=sdata$chl_big
plot(x,y)
newsdata=sdata[sdata$file_id!=208]
sdata$file_id
newsdata=sdata[sdata$file_id!='208']
newsdata=sdata[sdata$file_id!='208',]
newsdata=sdata[sdata$file_id!=208,]
newsdata
sindex<-createDataPartition(sdata$time,p=.5,list=FALSE)
traindata<-sdata[sindex,]
traindata<-sdata[sindex,]
testdata<-sdata[-sindex,]
model<-svm(fol,data=traindata)
outputsvm=predict(model,testdata,se.fit=TRUE)
testval=testdata$pop
t=outputsvm==testval
summary(t)
sindex<-createDataPartition(newsdata$time,p=.5,list=FALSE)
traindata<-sdata[sindex,]
testdata<-sdata[-sindex,]
model<-svm(fol,data=traindata)
outputsvm=predict(model,testdata,se.fit=TRUE)
testval=testdata$pop
t=outputsvm==testval
summary(t)
t
nrow(t)
nrow(sdata)
nrow(newsdata)
summary(t)
sindex<-createDataPartition(sdata$time,p=.5,list=FALSE)
traindata<-sdata[sindex,]
testdata<-sdata[-sindex,]
model<-svm(fol,data=traindata)
sindex<-createDataPartition(newsdata$time,p=.5,list=FALSE)
traindata2<-newsdata[sindex,]
testdata2<-newsdata[-sindex,]
model2<-svm(fol,data=traindata2)
outputsvm=predict(model,testdata,se.fit=TRUE)
outputsvm2=predict(model2,testdata2,se.fit=TRUE)
testval=testdata$pop
testval2=testdata2$pop
t=outputsvm==testval
t2=outputsvm2==testval2
summary(t)
summary(t2)
importance(model)
modelrf<-randomForest(fol,data=traindata)
q()
